Working in a Microsoft centric ecosystem, my team at this time utilizes Azure DevOps (https://azure.microsoft.com/en-us/services/devops/?msclkid=b3ab00d2b94511ec91be7932c7180f92). For a Reporting Project the other day, I had a request where alongside creating a dashboard for data scraped from a 3rd party tool's API, business users wanted to incorporate data from a particular Azure DevOps Board, to review how quickly certain related Work Item types were being resolved over time.

The below PowerShell script documents how this task was acheived, outputing the desired data as a .json file for modeling in Power BI, and is relatively simple overall - in my opinion. We utilize Work Item Query Language (WIQL - https://docs.microsoft.com/en-us/azure/devops/boards/queries/wiql-syntax?view=azure-devops) to get the fields we care about through the DevOps REST API call.

Steps:

1. Navigate to the Project of interest in your Azure Devops. Make note of your {organization}, {project}, and {team} in DevOps. These strings will need to be added to the below script as variables.

2. In the top-right, select the "User Settings" icon and go to "Personal access tokens". Assuming you have never set one up before, create a new token. For this example, I have given the access token a name, selected my {Organization}, specified access as being Full, and custom defined it to expire the maximum number of days I can specify (1 year). You can customize this to better fit your security and expiration preferences.

    Make note of this token ID as once you leave the screen you cannot retrieve it again, and thereby must create an entirely new token.

3. Paste the copied token value into the {$token} variable, and paste your noted {$organization}, {$project}, and {$team} strings into their appropriate variables. Specify where the exported data should be saved to in the {$exportFileLocation} variable. The example below utilizes my Downloads folder.

4. In the {$body} variable, build out the criteria that determines what work items you want data for. In my case I was looking for work items with the custom type of "Vulnerability" that had been completed, or, in state of "Done". 

    A quick note on this: the WHERE clause is the important part of the query inside {$body}. By REST API design, the return of this data call will only contain the Work Item ID, and the Work Item URL - regardless of what columns you specify in the SELECT clause.

5. Customize the {$customObject} and {$exportData} variables to output the fields you wish to export for found work items matching your query. Working inside PowerShell ISE, auto-complete helped me discover a number of available fields, both default and custom-defined in my custom work item type.

And that is pretty much it. 

Assuming the user you run this script as has full access to the work items you are trying to query, each work item matching your criteria will be looped through to retrieve details and then exported as a .json file to your specified location.

CHALLENGE

One notable challenge I ran into with this project is that the v6.0 of this DevOps REST API document mentions you should be able to query multiple work items at once and, retrieve the field data for each. This was not something I could get to work, as each call returned empty field data: "fields=;"

Working: $url = "https://dev.azure.com/$organization/$project/_apis/wit/workitems/12345?`$expand=All&api-version=5.0"
Not Working: $url = "https://dev.azure.com/$organization/$project/_apis/wit/workitems?ids=46477,43819&api-version=6.0"

I will update in the future if I figure out how to get this to work, but for now simply iterate through each returned work item matching query criteria, and 1 ID at a time retrieve the field data therein.
